/*
 * monitor.cpp
 * This file is part of an open-source test and measurement I/O library.
 * See documentation for details.
 *
 * Copyright (C) 2011 Stefan Kopp
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * The GNU General Public License is available at
 * http://www.gnu.org/copyleft/gpl.html.
 */

#include <fcntl.h>
#include <errno.h>
#include <iostream>
#include <time.h>
#include "opentmlib.hpp"
#include "io_monitor.hpp"

using namespace std;

io_monitor::io_monitor(string log_file)
{

	// Open trace file
	if ((fd = open(log_file.c_str(), O_WRONLY | O_TRUNC)) < 0)
	{
		throw_opentmlib_error(-errno);
		return;
	}

	// Log header line (with date/time)
	time_t system_time;
	time(&system_time);
	string time_str(ctime(&system_time));
	string message = "Trace generated by openTMlib on " + time_str;
	if (write(fd, message.c_str(), message.length()) < 0)
	{
		throw_opentmlib_error(-errno);
	}

}

io_monitor::~io_monitor()
{

	close(fd);

}

void io_monitor::log(string name, int direction, string message, bool eol)
{

	// Replace all newline characters by "<NL>"
	int pos;
	do
	{
		pos = message.find('\n');
		if (pos != string::npos)
		{
			message.replace(pos, 1, "<NL>");
		}
	}
	while (pos != string::npos);

	// Replace last character (if space) by "<SP>"
	if (message.substr(message.length() - 1, 1) == " ")
	{
		message = message.substr(0, message.length() - 1) + "<SP>";
	}

	// Add newline character
	if (1)
	{
		message += "\n";
	}

	// Add time stamp, instrument name and direction
	time_t system_time;
	time(&system_time);
	string time_str(ctime(&system_time));
	pos = time_str.find('\n');
	if (pos != string::npos)
	{
		time_str.replace(pos, 1, "");
	}
	string name_str;
	name_str = name.substr(0, 10);
	name_str.resize(10, ' ');
	if (direction == 0)
	{
		message = time_str + "\t" + name_str + "\t>>>\t" + message;
	}
	else
	{
		message = time_str + "\t" + name_str + "\t<<<\t" + message;
	}

	if (write(fd, message.c_str(), message.length()) < 0)
	{
		throw_opentmlib_error(-errno);
	}

	return;

}
