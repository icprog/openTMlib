/*
 * opentmlib.hpp
 * This file is part of an open-source test and measurement I/O library.
 * See documentation for details.
 *
 * Copyright (C) 2011 Stefan Kopp
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * The GNU General Public License is available at
 * http://www.gnu.org/copyleft/gpl.html.
 */

#ifndef OPENTMLIB_HPP
#define OPENTMLIB_HPP

#include <string>
#include <stdexcept>
#include "opentmlib.h"

using namespace std;

//enum OPENTMLIB_ERRORS
//{
//
//	/* General error codes */
//	OPENTMLIB_ERROR_BAD_ATTRIBUTE = 0x8000,
//	OPENTMLIB_ERROR_BAD_ATTRIBUTE_VALUE,
//	OPENTMLIB_ERROR_BAD_OPERATION,
//	OPENTMLIB_ERROR_BAD_OPERATION_VALUE,
//	OPENTMLIB_ERROR_MEMORY_ALLOCATION,
//	OPENTMLIB_ERROR_BUFFER_OVERFLOW,
//	OPENTMLIB_ERROR_BINBLOCK_HEADER,
//	OPENTMLIB_ERROR_BINBLOCK_SIZE,
//	OPENTMLIB_ERROR_BAD_RESOURCE_STRING,
//	OPENTMLIB_ERROR_CSTORE_BAD_ALIAS,
//	OPENTMLIB_ERROR_CSTORE_BAD_VALUE,
//	OPENTMLIB_ERROR_TIMEOUT,
//	OPENTMLIB_ERROR_IO_ISSUE,
//	OPENTMLIB_ERROR_TRANSACTION_ABORTED,
//	OPENTMLIB_ERROR_DEVICE_LOCKED,
//	OPENTMLIB_ERROR_OPERATION_UNSUPPORTED,
//	OPENTMLIB_ERROR_NO_LOCK_HELD,
//	OPENTMLIB_ERROR_LOCKING_NOT_SUPPORTED,
//
//	/* Error codes specific to socket driver */
//	OPENTMLIB_ERROR_SOCKET_REQUEST_TOO_MUCH,
//	OPENTMLIB_ERROR_SOCKET_CREATE,
//	OPENTMLIB_ERROR_SOCKET_CONNECT,
//	OPENTMLIB_ERROR_SOCKET_CLOSE,
//
//	/* Error codes specific to USBTMC driver */
//	OPENTMLIB_ERROR_USBTMC_OPEN,
//	OPENTMLIB_ERROR_USBTMC_WRITE,
//	OPENTMLIB_ERROR_USBTMC_READ,
//	OPENTMLIB_ERROR_USBTMC_DEVICE_NOT_FOUND,
//	OPENTMLIB_ERROR_USBTMC_MINOR_OUT_OF_RANGE,
//
//	/* Error codes specific to VXI11 driver */
//	OPENTMLIB_ERROR_VXI11_RPC,
//	OPENTMLIB_ERROR_VXI11_CONNECTION,
//	OPENTMLIB_ERROR_VXI11_ABORT_CONNECTION,
//	OPENTMLIB_ERROR_VXI11_LINK,
//	OPENTMLIB_ERROR_VXI11_READ,
//	OPENTMLIB_ERROR_VXI11_WRITE,
//	OPENTMLIB_ERROR_VXI11_READ_STB,
//	OPENTMLIB_ERROR_VXI11_INVALID_LINK_ID,
//	OPENTMLIB_ERROR_VXI11_ABORT,
//	OPENTMLIB_ERROR_VXI11_TRIGGER,
//	OPENTMLIB_ERROR_VXI11_CLEAR,
//	OPENTMLIB_ERROR_VXI11_REMOTE,
//	OPENTMLIB_ERROR_VXI11_LOCAL,
//	OPENTMLIB_ERROR_VXI11_LOCK,
//	OPENTMLIB_ERROR_VXI11_UNLOCK,
//	OPENTMLIB_ERROR_VXI11_SYNTAX,
//	OPENTMLIB_ERROR_VXI11_DEVICE_NOT_ACCESSIBLE,
//	OPENTMLIB_ERROR_VXI11_OUT_OF_RESOURCES,
//	OPENTMLIB_ERROR_VXI11_INVALID_ADDRESS,
//	OPENTMLIB_ERROR_VXI11_PARAMETER,
//	OPENTMLIB_ERROR_VXI11_CHANNEL_NOT_ESTABLISHED,
//	OPENTMLIB_ERROR_VXI11_CHANNEL_ESTABLISHED,
//
//	/* Error codes specific to serial */
//	OPENTMLIB_ERROR_SERIAL_OPEN,
//	OPENTMLIB_ERROR_SERIAL_CLOSE,
//	OPENTMLIB_ERROR_SERIAL_BAD_PORT,
//	OPENTMLIB_ERROR_SERIAL_REQUEST_TOO_MUCH
//
//};
//
//enum OPENTMLIB_ATTRIBUTES
//{
//
//	/* General attributes */
//	OPENTMLIB_ATTRIBUTE_TIMEOUT,
//	OPENTMLIB_ATTRIBUTE_TERM_CHAR_ENABLE,
//	OPENTMLIB_ATTRIBUTE_TERM_CHARACTER,
//	OPENTMLIB_ATTRIBUTE_STATUS_BYTE,
//	OPENTMLIB_ATTRIBUTE_SET_END_INDICATOR,
//	OPENTMLIB_ATTRIBUTE_EOL_CHAR,
//	OPENTMLIB_ATTRIBUTE_WAIT_LOCK,
//
//	/* Attributes specific to USBTMC driver */
//	OPENTMLIB_ATTRIBUTE_USBTMC_INTERFACE_CAPS,
//	OPENTMLIB_ATTRIBUTE_USBTMC_DEVICE_CAPS,
//	OPENTMLIB_ATTRIBUTE_USBTMC_488_INTERFACE_CAPS,
//	OPENTMLIB_ATTRIBUTE_USBTMC_488_DEVICE_CAPS,
//
//	/* Attributes specific to socket driver */
//	OPENTMLIB_ATTRIBUTE_SOCKET_BUFFER_SIZE,
//
//	/* Attributes specific to VXI-11 */
//	OPENTMLIB_ATTRIBUTE_VXI11_MAXRECVSIZE,
//	OPENTMLIB_ATTRIBUTE_VXI11_LAST_ERROR,
//
//	/* Attributes specific to serial */
//	OPENTMLIB_ATTRIBUTE_SERIAL_BAUDRATE,
//	OPENTMLIB_ATTRIBUTE_SERIAL_SIZE,
//	OPENTMLIB_ATTRIBUTE_SERIAL_PARITY,
//	OPENTMLIB_ATTRIBUTE_SERIAL_STOPBITS,
//	OPENTMLIB_ATTRIBUTE_SERIAL_RTSCTS,
//	OPENTMLIB_ATTRIBUTE_SERIAL_XONXOFF
//
//};
//
//enum OPENTMLIB_OPERATION_CODES
//{
//
//	/* General operation codes */
//	OPENTMLIB_OPERATION_TRIGGER,
//	OPENTMLIB_OPERATION_CLEAR,
//	OPENTMLIB_OPERATION_REMOTE,
//	OPENTMLIB_OPERATION_LOCAL,
//	OPENTMLIB_OPERATION_LOCK,
//	OPENTMLIB_OPERATION_UNLOCK,
//	OPENTMLIB_OPERATION_ENABLE_SRQ,
//	OPENTMLIB_OPERATION_ABORT,
//	OPENTMLIB_OPERATION_INDICATOR_PULSE,
//
//	/* Operation codes specific to USBTMC */
//	OPENTMLIB_OPERATION_USBTMC_ABORT_WRITE,
//	OPENTMLIB_OPERATION_USBTMC_ABORT_READ,
//	OPENTMLIB_OPERATION_USBTMC_CLEAR_OUT_HALT,
//	OPENTMLIB_OPERATION_USBTMC_CLEAR_IN_HALT,
//	OPENTMLIB_OPERATION_USBTMC_RESET,
//	OPENTMLIB_OPERATION_USBTMC_REN_CONTROL,
//	OPENTMLIB_OPERATION_USBTMC_GO_TO_LOCAL,
//	OPENTMLIB_OPERATION_USBTMC_LOCAL_LOCKOUT,
//
//};
//
//#define OPENTMLIB_SERIAL_PARITY_NONE			0
//#define OPENTMLIB_SERIAL_PARITY_EVEN			1
//#define OPENTMLIB_SERIAL_PARITY_ODD				2

struct error_list
{
	int error_code;
	string error_message;
};

void opentmlib_error(int code, string & message);
void throw_opentmlib_error(int code);

class opentmlib_exception : public runtime_error
{

public:
	int code;
	opentmlib_exception(int code, string & message);

};

#endif
